<?xml version="1.0" encoding="UTF-8"?>

<api xmlns="http://www.ioexception.de/rest-api-doc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.ioexception.de/rest-api-doc ./xsd/rest-api-doc.xsd ">
	<name>Mensafinder API</name>
	<version>v1</version>
	<author>Benjamin Erb</author>
	<description>tbd.</description>
	<baseuri>http://mensafinder.ioexception.de</baseuri>

	<authentication>
		<type>none</type>
	</authentication>
	<resources>
	
		<resource>
			<name>Orientation Queries</name>
			<description>These resources provide access to the orientation of the current users. The snapshot query lists all current entries, and a streaming query pushes changes to the client. The following request flow is recommended:
			<code language="plain">
   Client                      Mensafinder 

     |                               |
     |                               |
     |   (1) GET ../snapshot         |
     |------------------------------>|
     |                               |
     |   (2) 200 Snapshot (JSON)     |
     |&lt;------------------------------|
     |                               |
     |                               |
     |   (3) GET ../stream           |
     |------------------------------>|
     |                               |
     |   (4) 200 + event chunks      |
     |&lt;------------------------------|
     |                               |
     |                               |
</code>	
Clients should first retrieve and parse a snapshot(1+2), and then apply changes by processing the push streams(3+4).
			  </description>
			<path>/orientations</path>
			
			<operation>
				<name>Get a snapshot of all orientations</name>
				<description>This request returns a list of all users that have recently submitted orientations. In addition to user name and orientation, an age value is returned. It represents the age of an entry in seconds.</description>
				<path />
				<formats><format>application/json</format></formats>
				<request>
					<method>GET</method>
					<authentication mandatory="false"/>
					<entities></entities>
				</request>
				<response>
					<responses>
						<answer code="200">Incremental stream of events encoded as JSON structs.</answer>
						<answer code="404">Invalid request.</answer>
					</responses>
					<entities>
						<entity>
<code language="js"><![CDATA[{
   "time":"2011-05-31T14:24:34.020Z",
   "list":[
      {
         "user":"florian",
         "age":6,
         "orientation":120
      },
      {
         "user":"benjamin",
         "age":4,
         "orientation":165
      },
      {
         "user":"bastian",
         "age":2,
         "orientation":123
      }
   ]
}]]></code>
						<description>The JSON response contains a server-based timestamp and a list of available entries. Each entry lists a user name, an age value and an orientation value. The age value represents the age of this entry in seconds. The orientation value is the bearing submitted by the user.</description>
						</entity>
					</entities>
				</response>
			</operation>	
			
			<operation>
				<name>Get a live stream of new orientations</name>
				<description>This request allows users to receive changes directly. Therefore, chunked encoding is used for the response and the connection must not be closed by the client prematurely. The server will keep open the connection and flush new events as response entity. Each event is a complete JSON struct and events are separated using a delimiter. If the client closes the connection, the request can be repeated. Note that this may cause the loss of events when re-establishing the conneciton.</description>
				<path />
				<formats><format>application/json</format></formats>
				<request>
					<method>GET</method>
					<authentication mandatory="false"/>
					<entities></entities>
				</request>
				<response>
					<responses>
						<answer code="200">Service instance data in response entity</answer>
						<answer code="404">Invalid request.</answer>
					</responses>
					<entities>
						<entity>
<code language="js"><![CDATA[{"update":{"user":"bastian","orientation":123}}
]]></code>
						<description>The response is a set of events represented as JSON objects, that will be pushed by the server on-the-fly. JSON objects are separated using <tt>\r\n</tt> as delimiter. Thus, each response line represents exactly one JSON struct.  
						This sequence of characters will not be part of any regular event message. </description>
						</entity>
						<entity>
<code language="js"><![CDATA[{"update":{"user":"bastian","orientation":123}}
{"update":{"user":"benjamin","orientation":165}}
]]></code>
						<description>As soon as a new event happen, the server will append the additional JSON struct to the response.</description>
						</entity>
						<entity>
<code language="js"><![CDATA[{"update":{"user":"bastian","orientation":123}}
{"update":{"user":"benjamin","orientation":165}}
{"update":{"user":"florian","orientation":120}}
{"logout":{"user":"benjamin"}}
{"update":{"user":"florian","orientation":127}}
...
]]></code>
						<description>There are two different kinds of events. <tt>update</tt> events occur, when a user submits a new orientation. <tt>logout</tt> events are triggered when a user removes his orientation. Please notice that timeouts will not be streamed as events.</description>
						</entity>
					</entities>
				</response>
			</operation>				
		</resource>		
			
		<resource>
			<name>User Orientation</name>
			<description>This resource represents the orientation of a specific user. An orientation submitted to the service is valid for 5 minutes. When the orientation is not re-submitted within this interval, it will expire and be discarded.</description>
			<path>/user/<param description="alpha-numeric username, minimum 4, maximum 12 characters">name</param>/orientation</path>
					
			<operation>
				<name>Set or update user orientation</name>
				<description>This call sets the current orientation of the user. This call should only be dispatched when the user has a well-defined orientation. Please notice that a submission expires within 5 minutes, thus the request must be repeated if still valid.</description>
				<path>/<param description="Orientation in degrees (as integer between 0 and 360)">degree</param></path>
				<formats><format>application/json</format></formats>
				<request>
					<method>PUT</method>
					<authentication mandatory="false"/>
					<entities></entities>
				</request>
				<response>
					<responses>
						<answer code="202">The orientation has been set.</answer>
						<answer code="404">Invalid request.</answer>
					</responses>
					<entities>						
					</entities>
				</response>
			</operation>
				
			<operation>
				<name>Remove orientation</name>
				<description>This call removes the orientation of the user, signaling quit of the user. Users should use this operation for actively leaving the service and should not rely on expire times.</description>
				<path />
				<formats><format>application/json</format></formats>
				<request>
					<method>DELETE</method>
					<authentication mandatory="false"/>
					<entities></entities>
				</request>
				<response>
					<responses>
						<answer code="204">Orientation has been removed.</answer>
						<answer code="404">Invalid request.</answer>
					</responses>
					<entities>						
					</entities>
				</response>
			</operation>	
		</resource>		
	
	</resources>
</api>

 
